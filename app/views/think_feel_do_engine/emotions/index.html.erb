<div id="viz-container">
  <div class="row">
    <div class="btn-group-wrap">
      <div class="btn-group" data-toggle="buttons">
        <label class="btn btn-default active">
          <input type="radio" class="interval" value="7" checked="">7 Day
        </label>
        <label class="btn btn-default">
          <input type="radio" class="interval" value="28">28 day
        </label>
      </div>
    </div>
    <nav>
      <ul class="pager">
        <li><a class="offset" id="previous" data-value="1" href="#"><span aria-hidden="true">&larr;</span> Previous Period</a></li>
        <li><a class="offset" id="next" data-value="-1" href="#">Next Period <span aria-hidden="true">&rarr;</span></a></li>
       </ul>
    </nav>
    <div class="text-center" id="date-range">
      <strong>Date</strong>
    </div>
  </div>
  <div id="mood"></div>
  <div id="mood-legend" class="legend"></div>
  <div id="emotions"></div>
  <div id="emotion-legend" class="legend"></div>
</div>
<script>

  // starting graph parameters assume 7 day view ending in today
  var activationDate = activation("<%= current_participant.active_membership.start_date %>")

  var graphParameters = new Graph(<%= mood_ratings.to_json.html_safe %>, <%= emotional_ratings.to_json.html_safe %>, null, $("#viz-container"));
  var yLabel = "Intensity"

  var drawGraphs;

  drawGraphs = function() {
    var emotionGraphTitle,
        emotionLegendJSON,
        emotionLegendNotes,
        moodGraphTitle,
        moodLegendJSON,
        moodLegendNotes;

    $("div#mood, div#mood-legend, div#emotions, div#emotion-legend").empty();

    // mood viz
    moodGraphTitle = "Mood*";
    moodLegendJSON = [["Positive", "#4682B4"], ["Average†", "green"]];
    moodLegendNotes = ["†The average of each day's average.", "*Click each day for more information."];
    d3.select("#mood")
      .datum(graphParameters.moodData)
        .call(columnChart(graphParameters.startDate, graphParameters.endDate, 0, 10, moodGraphTitle, yLabel)
          .width(graphParameters.graphWidth)
          .height(300)
          .x(function(d, i) { return moment(d.day).startOf("day")._d; })
          .y(function(d, i) { return d.intensity; })
          .drawLegend("#mood-legend", moodLegendJSON, moodLegendNotes));

    // emotion viz
    emotionGraphTitle = "Positive and Negative Emotions*";
    emotionLegendJSON = [["Positive", "#4682B4"], ["Negative", "#A52A2A"], ["Average†", "green"]];
    emotionLegendNotes = ["†The average of each day's average.", "*Click each day for more information."];
    d3.select("#emotions")
      .datum(graphParameters.emotionsData)
        .call(columnChart(graphParameters.startDate, graphParameters.endDate, -10, 10, emotionGraphTitle, yLabel)
          .width(graphParameters.graphWidth)
          .height(400)
          .drawLegend("#emotion-legend", emotionLegendJSON, emotionLegendNotes));

    graphParameters.interval > 7 ? hideTicks() : showTicks()
    return appendDateRange(graphParameters);
  };

  drawGraphs();

  $('.interval').on("change", function (){
    graphParameters.interval = this.value;
    graphParameters.offset = 1;
    offsetInterval(graphParameters);
    drawGraphs();
  });

  $('.offset').on("click", function (){
    if($(this).attr("id") === "next" && graphParameters.offset === 1){
      return null
    }
    else if($(this).attr("id") === "previous" && graphParameters.offset == maxOffset(activationDate, graphParameters.interval)) {
      return null
    }
    else {
      graphParameters.offset += parseInt($(this).data("value"));
      offsetInterval(graphParameters);
      drawGraphs();
    }

  });
</script>
